---
alwaysApply: true
---


# MT-Canvus MCP Server Development Workflow

## Core Rules
- [TASKS.md](mdc:TASKS.md) is the single source of truth for all project tasks
- Every task must have a GitHub issue before work begins
- Use conventional commits: `{type}({scope}): {description}`
- All code must pass: ruff, black, mypy, pytest (run individually)
- **CRITICAL: Update TASKS.md in main branch first, then create feature branch**

## Task Status Indicators
- `- [ ]` = Not started
- `- [ðŸ”„]` = In Progress (add Status: In Progress (Issue #X))
- `- [âœ…]` = Completed (add Status: Completed (Issue #X))
- `- [ðŸš«]` = Blocked (add Status: Blocked (Issue #X))

## Collaborative Workflow
**CRITICAL: Follow this exact sequence to ensure robust multi-agent collaboration**

1. **Start on main branch and pull latest**:
   ```bash
   git checkout main
   git pull origin main
   ```

2. **Find next available task**:
   - Open TASKS.md, find first unchecked task `- [ ]`
   - Work on one task at a time, no parallel tasks

3. **Check for existing issues**:
   ```bash
   gh issue list --state open
   ```
   - Search for existing issues with similar task descriptions
   - If issue exists, use existing issue number
   - If no issue exists, create new one: `gh issue create --title "Task X.X.X: description" --body "requirements"`

4. **Check for existing branches**:
   ```bash
   git branch -a | grep "feature/{issue-number}"
   ```
   - If branch exists, switch to it: `git checkout feature/{issue-number}-description`
   - If branch doesn't exist, create new one after updating main

5. **Update TASKS.md in main branch FIRST**:
   ```bash
   git checkout main
   # Edit TASKS.md: - [ðŸ”„] Task X.X.X: description - Status: In Progress (Issue #X)
   git add TASKS.md
   git commit -m "docs(tasks): mark Task X.X.X as in progress (Issue #X)"
   git push origin main
   ```

6. **Create/switch to feature branch**:
   ```bash
   git checkout -b feature/{issue-number}-description
   ```
   - This ensures the branch has the updated TASKS.md from main

## Quality Requirements
- Test coverage >80%
- Docstrings for all public functions/classes
- No secrets in code
- Comprehensive error handling
- Use environment variables for configuration
- **IMPORTANT: Run quality checks individually to identify specific issues**
- **Update workflow documentation immediately** when gaps or missing steps are discovered
- **Test assertion robustness** â€” Ensure test assertions handle edge cases including zero values and empty states
- **CRITICAL: All integration tests must use the test server** â€” Use `https://canvusserver` with `verify_ssl: false` and test credentials only
- **Test Server Configuration**: Use `tests/test_config.json` for server settings
- **Integration Testing**: Use `TestClient` from `tests/test_config.py` for real server testing
- **CRITICAL: All test scripts MUST exit properly** â€” Use `process.exit(0)` on success and `process.exit(1)` on error to prevent hanging
- **Test Script Exit Protocol**: Every test script must explicitly call `process.exit()` to ensure clean termination

## Blocker Protocol
**CRITICAL: Follow this exact sequence when blocked to ensure task state is properly managed in main branch**

1. **Document blocker thoroughly in issue comments**:
   ```bash
   gh issue comment {number} --body "BLOCKER: [detailed description of the problem]
   
   Error details: [specific error messages]
   Attempted solutions: [what was tried]
   Current state: [what's preventing progress]
   Required resources: [what's needed to unblock]"
   ```

2. **Switch to main branch**:
   ```bash
   git checkout main
   ```

3. **Update TASKS.md to mark task as blocked**:
   ```bash
   # Edit TASKS.md: - [ðŸš«] Task X.X.X: description - Status: Blocked (Issue #X)
   git add TASKS.md
   git commit -m "docs(tasks): mark Task X.X.X as blocked (Issue #X)"
   git push origin main
   ```

4. **Pull latest main**:
   ```bash
   git pull origin main
   ```

5. **Move to next available task immediately**:
   - Find next unchecked task in TASKS.md
   - Create new issue if needed
   - Start new branch for next task

**Objective**: Ensure blocked tasks are properly documented in main branch so other agents can see the current state and avoid conflicts when working simultaneously.

## Conflict Resolution & Collaboration
**CRITICAL: Handle conflicts gracefully to maintain workflow integrity**

1. **If TASKS.md has conflicts**:
   ```bash
   git checkout main
   git pull origin main
   # Resolve conflicts in TASKS.md manually
   git add TASKS.md
   git commit -m "docs(tasks): resolve conflicts"
   git push origin main
   ```

2. **If feature branch is behind main**:
   ```bash
   git checkout feature/{issue-number}-description
   git rebase main
   # Resolve any conflicts
   git push --force-with-lease origin feature/{issue-number}-description
   ```

3. **If someone else is working on same task**:
   - Check issue comments for updates
   - Coordinate via issue comments
   - Consider switching to next available task if conflict persists

4. **Always verify task status before starting**:
   ```bash
   git checkout main
   git pull origin main
   # Check TASKS.md for current status
   # Check existing issues and branches
   ```

## Completion Workflow
- **CRITICAL: Run quality checks individually before PR**:
  - `ruff check . -q`
  - `black --check . -q`
  - `mypy .`
  - `pytest`
- **CRITICAL: Self-merge PR if no issues found**: `gh pr merge {number} --squash --delete-branch`
- **CRITICAL: Close issue after merge**: `gh issue close {number}`
- **CRITICAL: Switch back to main**: `git checkout main && git pull origin main`
- **CRITICAL: Update TASKS.md in main branch**: 
  ```bash
  # Edit TASKS.md: - [âœ…] Task X.X.X: description - Status: Completed (Issue #X)
  git add TASKS.md
  git commit -m "docs(tasks): mark Task X.X.X as completed (Issue #X)"
  git push origin main
  ```
- Verify completion: Check PR status and issue closure

## Commands Reference
```bash
# Collaborative workflow
git checkout main
git pull origin main
gh issue list --state open
git branch -a | grep "feature/{issue-number}"

# Issue management
gh issue create --title "Task X.X.X: description" --body "requirements"
gh issue list --state open
gh issue comment {number} --body "comment message"
gh issue close {number}

# Task status management (in main branch)
git checkout main
# Edit TASKS.md: - [ðŸ”„] Task X.X.X: description - Status: In Progress (Issue #X)
git add TASKS.md
git commit -m "docs(tasks): mark Task X.X.X as in progress (Issue #X)"
git push origin main

# Branch management
git checkout -b feature/{issue-number}-description
git checkout main && git pull origin main

# Conflict resolution
git rebase main
git push --force-with-lease origin feature/{issue-number}-description

# Quality checks (run individually)
ruff check . -q
black --check . -q
mypy .
pytest

# PR creation and completion
gh pr create --title "feat: description (Task X.X.X) (Issue #X)" --body "implements Task X.X.X"
gh pr merge {number} --squash --delete-branch

# Task completion (in main branch)
git checkout main
git pull origin main
# Edit TASKS.md: - [âœ…] Task X.X.X: description - Status: Completed (Issue #X)
git add TASKS.md
git commit -m "docs(tasks): mark Task X.X.X as completed (Issue #X)"
git push origin main
```

## Success Criteria
Before PR submission:
- [ ] Code passes quality checks
- [ ] Tests pass
- [ ] Documentation updated
- [ ] TASKS.md updated in main branch
- [ ] Issue referenced
- [ ] **CRITICAL**: Task number included in PR title and commit messages
- [ ] Conventional commits used
- [ ] No secrets in code
- [ ] Error handling implemented

After PR completion:
- [ ] **CRITICAL: PR self-merged (if no issues)**
- [ ] **CRITICAL: Issue closed**
- [ ] **CRITICAL: Switched back to main branch**
- [ ] **CRITICAL: Latest changes pulled**
- [ ] **CRITICAL: TASKS.md updated in main branch**
- [ ] **CRITICAL: Verify completion** â€” Check PR status and issue closure
